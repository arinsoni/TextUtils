{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","React","createElement","className","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","style","backgroundColor","abtHeadClr","aria-labelledby","data-bs-parent","Navbar","concat","mode","clr","Link","to","color","title","aria-label","aria-current","role","onClick","toggleMode","htmlFor","toggle1","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","word","split","length","_useState3","_useState4","Fragment","heading","value","placeholder","onChange","event","target","rows","newText","toUpperCase","showAlert","toLocaleLowerCase","element","document","console","log","file","Blob","getElementById","href","URL","createObjectURL","download","body","appendChild","click","navigator","clipboard","writeText","join","filter","Alerts","alert","lower","toLowerCase","charAt","slice","capitalize","msg","App","setAlert","message","setTimeout","setMode","_useState5","_useState6","setClr","_useState7","_useState8","setAbtHeadClr","Router","Routes","Route","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.84ace4d5.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\n\nexport default function About(props) {\n  \n    // const [myStyle, setMyStyle] = useState({\n    //     color: 'black',\n    //     backgroundColor: 'white',\n    // });\n\n\n    // const [btntext, setBtnText] = useState('Enable Dark Mode');\n    // const toggleButton = () => {\n    //     if(myStyle.color === 'white') {\n    //         let newMyStyle = {\n    //             color: 'black',\n    //             backgroundColor: 'white'\n    //         }\n    //         setMyStyle(newMyStyle);\n    //         let newText = 'Enable Dark Mode';\n    //         setBtnText(newText);\n    //     }\n    //     else{\n    //         let newMyStyle = {\n    //             color: 'white',\n    //             backgroundColor: 'black',\n    //             border: '1px solid white'\n    //         }\n    //         setMyStyle(newMyStyle);\n    //         let newText = 'Enable Light Mode';\n    //         setBtnText(newText);\n    //     }\n        \n\n    // }\n\n    return (\n        <div className=\"container\"  >\n            <div className=\"accordion mv-3\" id=\"accordionExample\" >\n                <h1 className='mv-3'>About Us</h1>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\n                        \n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={{backgroundColor: props.abtHeadClr}}>\n                            Accordion Item #1\n                        </button>\n                    </h2>\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\" >\n                        <div className=\"accordion-body\" >\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" >\n                            Accordion Item #2\n                        </button>\n                    </h2>\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" >\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" >\n                            Accordion Item #3\n                        </button>\n                    </h2>\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" >\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                {/* <button className=\"btn btn-primary my-3\" onClick={toggleButton}>{btntext}</button> */}\n            </div>\n        </div>\n    )\n}\n","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n\n\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode}`} style = {{backgroundColor: props.clr}}>\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\" style={{color: props.mode === 'light' ?  'black' : 'white'}}>{props.title}</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" >\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\" style={{color: props.mode === 'light' ?  'black' : 'white'}}>Home</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\" style={{color: props.mode === 'light' ?  'black' : 'white'}}>About</Link>\n            </li>\n          </ul>\n          {/* <div className=\"icon-1 text-center mx-2 my-1\">\n            <i className=\"fas fa-palette tg1\" onClick={props.toggle1}></i>\n          </div>\n          <div className=\"icon-2 text-center mx-2 my-1\">\n            <i className=\"fas fa-palette tg2\" onClick={props.toggle2}></i>\n          </div> */}\n          <div className={`form-check form-switch  mx-2 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark mode {props.mode === 'dark' ? 'Off' : 'On'}</label>\n          </div>\n          <div className={`form-check form-switch  mx-2 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggle1} />\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Red Yellow mode {props.mode === 'dark' ? 'Off' : 'On'}</label>\n          </div>\n          \n         \n\n        </div>\n      </div>\n    </nav>\n\n  );\n}\n\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n}","import React, { useState } from \"react\";\n\n\nexport default function TextForm(props) {\n    const handleUpClick = () => {\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to Uppercase\", \"success\");\n    }\n\n    const handleLowClick = () => {\n        let newText = text.toLocaleLowerCase();\n        setText(newText);\n        props.showAlert(\"Converted to Lowercase\", \"success\");\n    }\n\n    const handleOnChange = (event) => {\n        setText(event.target.value);\n    }\n    const clearText = () => {\n        let newtext = '';\n        setText(newtext);\n        props.showAlert(\"Text cleared succesfully\", \"success\");\n    }\n\n    const downloadTxtFile = () => {\n        const element = document.createElement(\"a\");\n        console.log(element);\n        const file = new Blob([document.getElementById('myBox').value],\n            { type: 'text/plain;charset=utf-8' });\n        element.href = URL.createObjectURL(file);\n        element.download = \"myFile.txt\";\n        document.body.appendChild(element);\n        element.click();\n        props.showAlert(\"txt file downloaded\", \"success\");\n    }\n    const handleCopy = () => {\n        navigator.clipboard.writeText(text);\n        props.showAlert(\"Text Copied\", \"success\");\n    }\n\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra spaces has been removed\", \"success\");\n    }\n\n    const [text, setText] = useState('');\n    const word = text.split(\" \").length == 1 ? 'word' : 'words';\n\n    const [cnt, setCnt] = useState('');\n    function countWords(text){\n        let x = 0;\n        text = String(text);\n        let y = text.split(\" \");\n        for(let i=0;i<y.length; i++){\n            if(y[i] != \"\"){\n                x = x + 1;\n            }\n        }\n        setCnt(x);\n\n    }\n\n    \n    return (\n        <>\n            <div className=\"container\" >\n                <h1 className=\"text-center heading\" style = {{color: props.mode === 'light' ? 'black' : 'white'}} > {props.heading}  </h1>\n                <form>\n                    <div className=\"form-group\">\n                        <textarea\n                            className=\"form-control\"\n                            style={{ backgroundColor: props.mode === 'light'? 'white' : 'lightgrey', color: props.mode === 'dark' ? 'black' : 'light', }}\n                            id=\"myBox\"\n                            value={text}\n                            placeholder=\"Enter your text\"\n                            onChange={handleOnChange}\n                            rows=\"8\"\n                        ></textarea>\n                    </div>\n                </form>\n            </div>\n\n            <div className=\"text-center\" >\n\n                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton1\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" style={{backgroundColor: props.mode === 'light' ? 'lightgrey' : 'lightgrey', color: props.mode === 'light' ? 'black' : 'black'}}>\n                    Dropdown button\n                </button>\n                <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\" style={{backgroundColor: props.mode === 'light' ? 'grey' : '#00224e'}}>\n                    <li  ><a className=\"dropdown-item\" onClick={handleUpClick}  style = {{color: props.mode === 'light' ? 'white' : 'black'}}>Convert to Uppercase</a></li>\n                    <li><a className=\"dropdown-item\" onClick={handleLowClick} style={{color: props.mode === 'light' ? 'white' : 'black'}}>Convert to Lowercase</a></li>\n                </ul>\n\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={downloadTxtFile} style={{backgroundColor: props.mode === 'light' ? 'lightgrey' : 'lightgrey', color: props.mode === 'light' ? 'black' : 'black'}}>Download text File</button>\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={clearText} style={{backgroundColor: props.mode === 'light' ? 'lightgrey' : 'lightgrey', color: props.mode === 'light' ? 'black' : 'black'}} >Clear text</button>\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handleCopy} style={{backgroundColor: props.mode === 'light' ? 'lightgrey' : 'lightgrey', color: props.mode === 'light' ? 'black' : 'black'}}>Copy text</button>\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handleExtraSpaces} style={{backgroundColor: props.mode === 'light' ? 'lightgrey' : 'lightgrey', color: props.mode === 'light' ? 'black' : 'black'}}>Remove Extra Spaces</button>\n            </div>\n            <div className=\"container\" style={{ color: props.mode === 'light'  ? 'black' : 'white' }}>\n                <h2>Your text summary</h2>\n                <p> {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} <b>{word}</b> and {text.length} <b>characters</b>\n                </p>\n                <p>{0.008 * text.split(\" \").length} Minutes read</p>\n                <h2>Preview</h2>\n                <p>{text.length > 0 ? text : 'Enter Your text to Preview'}</p>\n            </div>\n\n\n\n\n\n        </>\n    );\n}\n\n\n","import React from 'react'\n\nexport default function Alerts(props) {\n    const capitalize = (word) => {\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}: </strong> {props.alert.msg}\n        </div>\n    )\n}\n","import { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alerts from './components/Alerts';\nimport React, { Component } from 'react';\n\n\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n\n  // Dark and Light Mode\n  const [mode, setMode] = useState('light');\n\n  const [clr, setClr] = useState('lightgrey');\n  const [abtHeadClr, setAbtHeadClr] = useState('coral')\n\n  \n  \n\n  const toggleMode = () => {\n    if (mode === 'dark') {\n\n      setMode('light');\n      setClr('lightgrey');\n      setAbtHeadClr('coral');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode Enabled\", \"success\");\n    }\n\n\n    else {\n      setMode('dark');\n      setClr('black');\n      setAbtHeadClr('gray');\n\n      document.body.style.backgroundColor = '#333333';\n      showAlert(\"Dark Mode Enabled\", \"success\");\n    }\n\n  }\n  const toggle1 = () => {\n    \n    if (mode === 'light' || mode === 'dark') {\n      \n      setMode('dark2');\n      setClr('#00224e');\n      setAbtHeadClr('cyan');\n      document.body.style.backgroundColor = '#4c408e';\n      showAlert(\"Light Mode Enabled\", \"success\");\n    }\n\n    else if (mode === 'dark2') {\n      setMode('light');\n      setClr('lightgrey');\n      setAbtHeadClr('coral');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode Enabled\", \"success\");\n    }\n    \n  }\n\n\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} clr={clr} toggle1={toggle1} />\n        <Alerts alert={alert} />\n        <div className=\"container my-3\" >\n          <Routes>\n            <Route exact path=\"/about\" element={<About mode={mode} abtHeadClr={abtHeadClr} />} />\n          </Routes>\n          <Routes>\n            <Route exact path=\"/\" element={<TextForm heading=\"Word Analyzer\" mode={mode} showAlert={showAlert} clr={clr} toggle1={toggle1} />\n            } />\n          </Routes>\n\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}